// Author: Jesus Morales
// Last change: 03/11/2021

parseScriptFile('device_services/n_getmatpos.js');     
parseScriptFile('getbackunwrappedMatrix.js')
parseScriptFile('device_services_.js');                
parseScriptFile('checkarraynew.js');
parseScriptFile('savewrappedMatrix.js');
parseScriptFile('make_file_name.dwj')
parseScriptFile('create_my_line_drawing.js');
parseScriptFile('HTML/common/get_line_drawing.js')
parseScriptFile('setmyvaluenew.js')
parseScriptFile('LineCable_data/createXML.js');
parseScriptFile('max_file_name_len.js');


//-OPEN method--------------------------------------------------------------------------------------------
function LineCable_data_open_o(){
    
  var dev = this.dev;
  if (dev == null) { halt(); }


  //+Initialization
  this.my_device_services_.initialize_web_data(dev);

  //*get the script directory
  var f = SPFile();
  f.setScriptPath(""); //has / at the end

  //-Create the web-----------------------------------------------------------------
  box = SPHTMLDialog();

  //* Set the web pages
  urls = SPArray(f+"LineCable_data/data.htm",
                 f+"LineCable_data/model.htm",
                 f+"LineCable_data/help.htm");
  
  //* Send the parameters to the web using the box object
  send_data_to_web(box,this.Parameters)
  
  //* This is done to avoid putting everything into FormData, the Grids go into XMLDataGrids attribute
  send_data_to_web_skipParameters(box,this); //ModelData, Grid contents
 
  // *OPEN THE WEBS    
    parseScriptFile('EMTPhtmlProperties.dwj');
    EMTDialog = EMTdoDialog(urls, this.title, box, this.WindowXsize, this.WindowYsize, dev); 
  
    box = EMTDialog.box;
    if(EMTDialog.Cancel) { return; }   // If window is closed with Cancel or with X (at the top, right side), return
   
  
  //*Get back data from web
  get_data_from_web(box,this.Parameters)
  get_data_from_web_skipParameters(box,this); //ModelData, grid contents

  this.SaveData();

}


//-SAVE method--------------------------------------------------------------------------------------------
function LineCable_data_save_o(){

    var dev=this.dev;

    this.dev.setAttribute('ModelDataError',''); //to reset notify errors that the user has made in this device
    //*Save back into FormData
    FormData = this.my_device_services_.SaveParametersIntoFormData(this.Parameters)
    dev.setAttribute('FormData', FormData);

    // the name given to the output file is also given to the LineCable_Data device
    dev.setAttribute('Name',this.output_file_name);

    // save the device version
    dev.setAttribute('DeviceVersion',this.LatestVersion);    
   
    // Final check for tables

    // Check of Bundle conductors table
    if (this.Parameters.Nphases_bundle > 0) {
      this.BundleDataGrid = checkArray(this.BundleDataGrid, this.Parameters.Nphases_bundle, 8)
    }

    // Check of Single-wire conductors table
    if (this.Parameters.Nphases_single_wire > 0) {
      this.OverheadLineDataGrid = checkArray(this.OverheadLineDataGrid, this.Parameters.Nphases_single_wire, 6)
    }

    // Check of Single-core cable tables
    if (this.Parameters.Nphases_single_core > 0) {

      // Check of Single-core Main table
      this.SingleCoreMainGrid = checkArray(this.SingleCoreMainGrid, this.Parameters.Nphases_single_core, 4)
    }

    // Check of Pipe-type cable tables
    if (this.Parameters.Nphases_pipe_cable > 0) {
       
      // Check of Pipe-type cable Main table
      this.PipeCableMainGrid = checkArray(this.PipeCableMainGrid, this.Parameters.Nphases_pipe_cable, 4)

      // Check of Pipe-type cable Conductors table
      // For this table, the first column is removed because when it is displayed in the mask, the first column is inserted automatially
      DataValues = this.PipeCableDataGrid;
      
      // remove the first column (inserted automatically)
      if( DataValues.length > 0 ) { //only if data exists

         DataValues = DataValues.split('\n');
         var irow = 0;
         NewDataValues = '';
        
         for (irow = 0; irow < DataValues.length; irow++) {
             values_irow = DataValues[irow]; 
             values_irow = values_irow.split('\t');
             values_irow = this.Parameters.stranded=="1"?values_irow[1] + '\t' + values_irow[2] + '\t' + values_irow[3] + '\t' + values_irow[4] + '\t' + values_irow[5] + '\t' + values_irow[6] + '\t' + values_irow[7] + '\t' + values_irow[8] + '\t' + values_irow[9] + '\t' + values_irow[10] + '\t' +values_irow[11] + '\t' +values_irow[12]:values_irow[1] + '\t' + values_irow[2] + '\t' + values_irow[3] + '\t' + values_irow[4] + '\t' + values_irow[5] + '\t' + values_irow[6] + '\t' + values_irow[7] + '\t' + values_irow[8] + '\t' + values_irow[9] + '\t' + values_irow[10] + '\t' +values_irow[11];
             if (irow == 0) {
               NewDataValues = values_irow + '\n'
             }else{
               NewDataValues = NewDataValues + values_irow + '\n'
             }
         }
     }

    this.PipeCableDataGrid = NewDataValues;
    }
    
    // Check for G parameter table
    if (this.Enter_G){
      this.gDataGrid = checkArray(this.gDataGrid, 1, Math.max(this.Parameters.Nphases_single_wire,this.Parameters.Nphases_bundle));
    }

    // End of final check for tables
    
    //*Save Grids in XMLDataGrids attribute
    var SpecialSeparatorForstackingXML = this.my_device_services_.SpecialStringsVariables()

    var XMLDataGrids =    this.BundleDataGrid       + SpecialSeparatorForstackingXML.StackedXMLStringsSeparator
                        + this.OverheadLineDataGrid + SpecialSeparatorForstackingXML.StackedXMLStringsSeparator
                        + this.SingleCoreMainGrid   + SpecialSeparatorForstackingXML.StackedXMLStringsSeparator
                        + this.SingleCoreDataGrid   + SpecialSeparatorForstackingXML.StackedXMLStringsSeparator
                        + this.PipeCableMainGrid    + SpecialSeparatorForstackingXML.StackedXMLStringsSeparator
                        + this.PipeCableDataGrid    + SpecialSeparatorForstackingXML.StackedXMLStringsSeparator 
                        + this.SoilLayersDataGrid   + SpecialSeparatorForstackingXML.StackedXMLStringsSeparator                      
                        + this.gDataGrid            + SpecialSeparatorForstackingXML.StackedXMLStringsSeparator                  

    dev.setAttribute("XMLDataGrids",XMLDataGrids)

    // Save model options in ModalData attribute
    var ModelData = this.Model +','+ this.Length +','+ this.Resistivity +','+ this.soil_mu +','+ this.soil_epsilon +','+
                    this.CP_frequency +','+ this.frequency_scale +','+ this.fmin +','+ this.NPDEC +','+ this.NDECS +','+
                    this.deltaf +','+ this.fmax +','+ this.Proximity +','+ this.EarthReturn +','+ this.Enter_G +','+ 
                    this.Balanced +','+ this.rotation_Qmatrix +','+ this.Segmented_gw +','+ this.Crossbond +','+ 
                    this.Crossbond_sheathGW +','+ this.FittingTolerance +','+ this.CableModelCorrection +','+
                    this.ResiduePoleThreshold +','+ this.DCcorrection +','+ this.ApplyGrouping +','+ this.Frequency_Qmatrix_FDmodel;

    //save into XML and ModelData attributes
    //*Set ModelData
    this.my_device_services_.SaveModelData(this,ModelData)

    //+ Start generating model if the user accepts
    this.generate_model=false;

    if(  this.Parameters.SelectedType == 'none' ){
      dev.setAttribute('Value1','No model')
         
    }else{
      if( confirm('Calculate or recaculate Model data from this device?') ){
        this.generate_model=true;
      }else{
        this.generate_model=false;
      }
    }



    if (this.generate_model) {  // checkbox in Output tabs
      
      //+We need to access model data file from _pj folder
      prepare_pj_folder();  //creates _pj folder if it does not exist
      pj_folder_name = project_folder_name(); //gives pj 
      this.output_file_name=this.dev.getAttribute('Name')

      //*=========== Create the .xml file (input file for the compiled code) =================================
      //It will create a file with pj_folder_name+ device name, XML file
        createXML(dev,pj_folder_name);

      FilefromDataDevice = pj_folder_name + '/' + this.output_file_name;
      // Example: c:\test\CASE_pj\DeviceName
      InputFile=SPFile();
      InputFile.fullName(FilefromDataDevice)
      InputFile.extension('xml');

      //* Display input file in the console's header
      // First is title and second is the reference alias (CctName)
      var CurrentLevel
      ForWhichCircuit=GetTopCircuitHandle()

      var LineCableDataConsole = SPRichConsole("Line/Cable Data", ForWhichCircuit.getAttribute('CctName') );
      LineCableDataConsole.activate()
      sleep(1000); //force displaying
      
      //* Display start of LineCable Data in console
      LineCableDataConsole.clear();
      LineCableDataConsole.setFont("Arial Blue 12 white")
      LineCableDataConsole.writeln('Line/Cable data calculations started. Wait...')
      LineCableDataConsole.writeln('Device: '+this.dev.getAttribute('Name') )
      LineCableDataConsole.writeln("Input data file: "+InputFile)
      LineCableDataConsole.setFont("Arial Black 12 white")

      //* Check if input file was generated, if no, pop-up an alert, show error in console and stop
      //  This is the xml file generated in createXML
      if(!InputFile.exists){
        alert('Error: The input file '+InputFile+' does not exist.')
        dev.setAttribute('Value1','Error!')
        LineCableDataConsole.setFont("Arial Red 12 yellow")
        LineCableDataConsole.writeln('Unable to generate model file, abnormal termination!')
        return
      }

      //-- Define output (.log) and model file names 
      // The .log file contains the information to be displayed in console.
      // .log extension is for logfile
      // .mod extension is for model file to be inserted into 
      // The name and extension of these files depend on the selected model. 
      LogFile=SPFile();       ModelFile=SPFile();

      if (this.Model == 'CP'){
        //+CP MODEL, located in the _pj folder
        LogFile.fullName(FilefromDataDevice+'_CP');    // _CP.log
        ModelFile.fullName(FilefromDataDevice+'_CP');  // _CP.mod
        ModelFile.extension('mod');
      }else if (this.Model == 'WB'){
        //+WB MODEL, located in the same folder as the design
        LogFile.fullName(FilefromDataDevice+'_WB');    //_WB.log in the _pj folder

        var designfile = dev.circuit.design;
        var fileDir = designfile.fileDir();
        var WB_filename = fileDir + this.output_file_name + '_WB'; //_WB.mod 
        ModelFile.fullName(WB_filename);
        ModelFile.extension('mod');

      }else if (this.Model == 'FD'){
        //+FD model
        LogFile.fullName(FilefromDataDevice+'_FD'); // _FD.log

        // Code for calling the FD_fitter.exe out of LineCable_data.exe (below) ======================
        InputFile.fullName(FilefromDataDevice+'_FD');  //_ 
        InputFile.extension('fdp');

        OutputFile=SPFile();
        OutputFile.fullName(FilefromDataDevice+'_FD');
        OutputFile.extension('out');

        var designfile = dev.circuit.design;
        var fileDir = designfile.fileDir();
        var FD_filename = fileDir + this.output_file_name + '_FD';
        ModelFile.fullName(FD_filename);
        ModelFile.extension('mod');
        // ==========================================================================================

        // Code for calling FD_fitter.exe from LineCable_data.exe ===================================
        // var designfile = dev.circuit.design;
        // var fileDir = designfile.fileDir();
        // var FD_filename = fileDir + this.output_file_name + '_FD';
        // ModelFile.fullName(FD_filename);
        // ModelFile.extension('mod');
        // ===========================================================================================

      }else if (this.Model == 'Exact_PI'){
        //+ EXACT_PI 
        LogFile.fullName(FilefromDataDevice+'_Exact_PI');
        var designfile = dev.circuit.design;
        var fileDir = designfile.fileDir();
        var Exact_PI_filename = fileDir + this.output_file_name + '_Exact_PI';
        ModelFile.fullName(Exact_PI_filename);
        ModelFile.extension('mod');

      }else if (this.Model == 'Nominal_PI'){
        //+ Nominal PI
        LogFile.fullName(FilefromDataDevice+'_Nominal_PI');
        ModelFile.fullName(FilefromDataDevice+'_Nominal_PI');
        ModelFile.extension('mod');
      }

      //* Remove any previous .log file
      LogFile.extension('log');
      status=LogFile.remove;  //the file may not exist

      //* Remove any previous model file
      if(ModelFile.exists){
        status=ModelFile.remove;  //the file may not exist
        if(!status){  // If previous model cannot be removed, show error in console and stop
            LineCableDataConsole.setFont("Arial Red 12 yellow")
            LineCableDataConsole.writeln('Error: Unable to remove existing model file: '+ ModelFile.fullName)
            LineCableDataConsole.writeln('The model has not been generated.')
            return
        }
      }

      //+ Ready to Run
      //*Set Value1 Attribute (showed in screen) to Wait...
      dev.setAttribute('Value1','Wait...')

      //+======== Run Matlab compiled code ================================================
        run('emtp/LineCableData/LineCable_Data.exe','"'+FilefromDataDevice+'"','',-1);    

      //+Special case for FD  
      if (this.Model=='FD'){

        // Intercept .log file (messages from LineCable_data.exe) to include FD fitting info
        LogFileText = LogFile.readText();  

        // verify that FD_fitter input file exists
        if(InputFile.exists){

          LogFileText += '\n    Starting FD fitter function ...';
          LogFileText += '\n         Input file: '+InputFile.fullName;

          //_ Run FD fitter program, attention we need ProgressPanelCLSID
          ProgressPanelCLSID=getPrivateCLSID('EMTPWorks.BrowserPanel.Single')
          var InputArguments = "I:"+'"'+InputFile.fullName+'" O:'+'"'+OutputFile.fullName+
          '" P:'+'"'+ModelFile.fullName+'"'+' C:'+ProgressPanelCLSID;
          myrun = run('emtp/LineCableData/FD_fitter.exe',InputArguments,'',-1);
          sleep(1000); // give time to the FD fitter to run and generate the model file

          if(myrun){
            if(OutputFile.exists){    // catch error in fitting
              var Out_FDmodel_File = OutputFile.readText();     
              Out_FDmodel_File = Out_FDmodel_File.split('\n');
              for(ii=0;ii<Out_FDmodel_File.length;ii++){
                if( Out_FDmodel_File[ii].search("THE ALGORITHM CANNOT FIT THIS CURVE") != -1 ) {
                  LogFileText += '\n            Error: The FD fitter algorithm could not fit this model.'
                }
              }
              OutputFile.close();
            }

            LogFileText += '\n         Output file (messages): '+OutputFile.fullName;

            LogFileText += '\n    FD fitter function ended.';

          }else{
            LogFileText += '\n    Error: FD fitter function failed.';
          }
        }else{
          LogFileText += '\n    Error: Input file for FD fitter was not generated. The model was not generated.';
        }

        // Delete and print .log file again
        LogFile.remove();           // remove old file (generated by LineCable_Data.exe)
        LogFile.openCreate();       // create new file (including FD fitter messages)
        LogFile.writeText(LogFileText)
        LogFile.close();

      } //+END FD CODE, special


      //*Check if .log file was generated
      if( LogFile.exists && ModelFile.exists ){     // Normal case, both files exist

        // Display the .log file name in the console
        LineCableDataConsole.writeln('Log file (information) : ' + LogFile.fullName)

        // Read the .log file
        LogFileText = LogFile.readText();

        // print line-by-line and check error/warning messages
        LogFileText=LogFileText.split('\n');
        for(ii=0;ii<LogFileText.length;ii++){
          if( LogFileText[ii].search("Error") != -1 || LogFileText[ii].search("Warning") != -1 ) {
              LineCableDataConsole.setFont("Arial Red 12 white")
              LineCableDataConsole.writeln(LogFileText[ii]);
              LineCableDataConsole.setFont("Arial Black 12 white")
          }else{
              LineCableDataConsole.writeln(LogFileText[ii]);
          }
        }

        // Display in the console the end of the LineCable_Data code
        LineCableDataConsole.writeln('Model file: '+ModelFile.fullName)
        LineCableDataConsole.setFont("Arial Blue 12 white")
        LineCableDataConsole.writeln('Line/Cable data terminated.')

        // Show the model file name in Value1 Attribute (showed in screen)
        dev.setAttribute('Value1','Model in: '+ModelFile.name)
        dev.setAttribute('ModelData1',ModelFile.name)
          
      }else if( LogFile.exists ){       // only .log file exists

        LogFileText = LogFile.readText()

        // print line-by-line and check error/warning messages
        LogFileText=LogFileText.split('\n');
        for(ii=0;ii<LogFileText.length;ii++){
          if( LogFileText[ii].search("Error") != -1 || LogFileText[ii].search("Warning") != -1 ) {
              LineCableDataConsole.setFont("Arial Red 12 white")
              LineCableDataConsole.writeln(LogFileText[ii]);
              LineCableDataConsole.setFont("Arial Black 12 white")
          }else{
              LineCableDataConsole.writeln(LogFileText[ii]);
          }
        }

        LineCableDataConsole.setFont("Arial Red 12 white")
        LineCableDataConsole.writeln('    Model file was not generated');

        LineCableDataConsole.setFont("Arial Blue 12 white")
        LineCableDataConsole.writeln('Line/Cable data terminated.')
        dev.setAttribute('Value1','Error!')  // Display error on the device

      }else{

        LineCableDataConsole.setFont("Arial Red 12 white")
        LineCableDataConsole.writeln('    Model file was not generated');

        LineCableDataConsole.setFont("Arial Black 12 yellow")
        LineCableDataConsole.writeln('Abnormal termination of Line/Cable data.')
        dev.setAttribute('Value1','Error!')  // Display error on the device

      }      

    } //end of model generation procedure

}


//-OBJECT CREATOR method----------------------------------------------------------------------------------
function oDevice_LineCable_data(dev){

  //+Set the services
  my_device_services_ = new device_services_();

  //+ Create Parameters object
  this.Parameters = new Parameters_definition();

  //*Version management
  this.LatestVersion = 1.1;
  this.DeviceVersion = dev.getAttribute('DeviceVersion');
  
  //========== Retrieve data from Attributes ================================================

  //+This function reads the FormData attribute data and overwrites the object this.Parameters
  my_device_services_.get_object_data_from_FormData(this.Parameters,dev);
  
  //+ GridsData contain the information of grids
  var GridsData = dev.getAttribute("XMLDataGrids");
  // Set separator for ModelData information
  var SpecialSeparatorForstackingXML = my_device_services_.SpecialStringsVariables()
  // Split ModelData appropriately
  GridsData = GridsData.split(SpecialSeparatorForstackingXML.StackedXMLStringsSeparator);

  // Set grid contents read from XMLDataGrids attribute
  this.BundleDataGrid =        GridsData[0];
  this.OverheadLineDataGrid =  GridsData[1];
  this.SingleCoreMainGrid =    GridsData[2];
  this.SingleCoreDataGrid =    GridsData[3]; 
  this.PipeCableMainGrid =     GridsData[4];
  this.PipeCableDataGrid =     GridsData[5];
  this.SoilLayersDataGrid =    GridsData[6];
  this.gDataGrid         =     GridsData[7];

  //+ ModelData attribute contains the Model and options
  var ModelData = dev.getAttribute("ModelData");
  ModelData = ModelData.split(',')
  
  this.Model =               ModelData[0];
  this.Length =              ModelData[1];
  this.Resistivity =         ModelData[2];
  this.soil_mu =             ModelData[3];
  this.soil_epsilon =        ModelData[4];
  this.CP_frequency =        ModelData[5];
  this.frequency_scale =     ModelData[6];
  this.fmin =                ModelData[7];
  this.NPDEC =               ModelData[8];
  this.NDECS =               ModelData[9];
  this.deltaf =              ModelData[10];
  this.fmax =                ModelData[11];
  this.Proximity =           ModelData[12];
  this.EarthReturn =         ModelData[13]; 
  this.Enter_G =             ModelData[14];
  this.Balanced =            ModelData[15];
  
  this.rotation_Qmatrix =    ModelData[16];  

  if (this.LatestVersion!=this.DeviceVersion){    // **Upgrade for CP model
    // In previous version, CP model did not allow the 'rotation_Qmatrix' option,
    // now it is available and we are forcing the 'minimize imag(Q)' as default option
    if( this.Model=='CP' && this.rotation_Qmatrix=='1' ) {
      this.rotation_Qmatrix='2';   
    } 
  }
  
  this.Segmented_gw =        ModelData[17];
  this.Crossbond =           ModelData[18];
  this.Crossbond_sheathGW =  ModelData[19];
  this.FittingTolerance =    ModelData[20];


  this.CableModelCorrection= ModelData[21];    
  this.ResiduePoleThreshold= ModelData[22];
  
  this.DCcorrection =        ModelData[23];
  this.ApplyGrouping =       ModelData[24]; 
  this.Frequency_Qmatrix_FDmodel = ModelData[25];
  
  this.output_file_name = dev.getAttribute("Name");

  //By default, the checkbox 'generate model' is set unchecked
  this.generate_model = '';

  //============== End of Retrieve data from Attributes ======================================  

  // Now include the object functions
  //*Upgrade method  
  //this.upgrade = LineCableData_Upgrade;
  //*The save method
  this.SaveData = LineCable_data_save_o;

  //*Service functions
  this.my_device_services_ = my_device_services_;


  //*The doubleclick method  Open
  this.open = LineCable_data_open_o;

  //*save the device handle
  this.dev = dev;

  //*save the export device handle
  this.ExportDev= dev;

  //*Set the size of the mask window
  ResolutionType=readIniString('WEBs','ResolutionType',true)
  if(ResolutionType==4){
   this.WindowYsize = 1000;
   this.WindowXsize = 1500;

  }else{
    this.WindowYsize = 400;
    this.WindowXsize = 1200;
  }

  //*Window header
  this.title = "Properties for " + dev.getAttribute("Name");

}


// This function defines the fields of the object "Parameters". 
function Parameters_definition(){ 
  this.Nphases_bundle = '0';  
  this.Nphases_single_wire = '0'; 
  this.Midspan = ''; 
  this.Hollow = '';  
  this.Nphases_single_core = '0';
  this.Nphases_pipe_cable = '0';
  this.length_units = '';
  this.Conductor_characteristic = '';
  this.stranded = '';
  this.SelectedType = 'none';    // This is the main selector, overhead line, underground cable, combined line and cable or p.u.l. parameters
  this.pul_parameters_file = '';
  this.MultilayerSoil = '';
  this.SoilLayers = '2';    // Only used if multilayer soil is checked

  //*Setting for visual control
  this.ShowConductorNames               ='1'
  this.DisplayConductorHeights          ='1'
  this.DisplayDistanceBetweenConductors ='1'
  this.SetMinValueForConductorSizes     ='1'
}


